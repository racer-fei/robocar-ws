import cv2 as cv
import numpy as np

def uma_camera(image):
    width = image.shape[1]
    mid_x = width // 2
    return image[:, :mid_x]

def roi(image):
    height, width = image.shape[:2]
    polygons = np.array([[(0, height), (width, height), (width, height // 2), (0, height // 2)]], dtype=np.int32)
    mask = np.zeros_like(image)
    cv.fillPoly(mask, polygons, (255, 255, 255))
    masked_image = cv.bitwise_and(image, mask)
    return masked_image

def detect_lines(image):
    len=100
    gap=9
    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
    blurred = cv.GaussianBlur(gray, (5, 5), 0)
    canny = cv.Canny(blurred, 50, 150)
    lines = cv.HoughLinesP(canny, 1, np.pi / 180, 100, minLineLength=len, maxLineGap=gap)
    lines = filter_lines(lines)
    
    # Desenha as linhas na imagem original para visualização
    img_with_lines = image.copy()
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line[0]
            cv.line(img_with_lines, (x1, y1), (x2, y2), (0, 255, 0), 2)
    
    return img_with_lines, lines

def filter_lines(lines, angle_threshold=10):
    """Filtra linhas para ignorar linhas horizontais (ou quase horizontais)."""
    if lines is None:
        return None
    
    filtered_lines = []
    for line in lines:
        x1, y1, x2, y2 = line[0]
        angle = np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi
        if abs(angle) > angle_threshold:  # Filtra linhas horizontais (ou quase horizontais)
            filtered_lines.append(line)
    
    return filtered_lines

    
    # Salva a imagem com as linhas detectadas
    cv2.imwrite('imagem_com_linhas.jpg', img_with_lines)
    
    # Mostra o número de linhas detectadas
    print(f"Número de linhas detectadas: {len(lines) if lines is not None else 0}")


#888888888888888888888888888888888888888888888888888888888888888888888888888
def main():
    cap = cv.VideoCapture(0)
    if not cap.isOpened():
        print("Erro ao abrir a câmera.")
        return
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Não foi possível capturar o quadro.")
            break
#----------------------------------------------------------------------
        esquerda= uma_camera(frame)
        roi_image= roi(esquerda)
        detect_image=detect_lines(roi_image)

        cv.imshow('Uma camera', esquerda)
        cv.imshow('Roi', roi_image)
        cv.imshow('Linhas detectadas', detect_image)

#----------------------------------------------------------------------
        if cv.waitKey(1) & 0xFF == ord('q'):
            break
    cap.release()
    cv.destroyAllWindows()

if __name__ == '__main__':
    main()
